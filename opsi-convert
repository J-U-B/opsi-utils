#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
   = = = = = = = = = = =
   =   opsi-convert    =
   = = = = = = = = = = =
   
   opsi-convert is part of the desktop management solution opsi
   (open pc server integration) http://www.opsi.org
   
   Copyright (C) 2007, 2008 uib GmbH
   
   http://www.uib.de/
   
   All rights reserved.
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License version 2 as
   published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
   
   @copyright:	uib GmbH <info@uib.de>
   @author: Jan Schneider <j.schneider@uib.de>
   @license: GNU General Public License version 2
"""

__version__ = '3.5'

import fcntl, termios, struct, os, sys

# OPSI imports
from OPSI.Logger import *
from OPSI.Backend.MySQL import MySQLBackend
from OPSI.Backend.File31 import File31Backend
from OPSI.Backend.Replicator import BackendReplicator

logger = Logger()
logger.setConsoleLevel(LOG_ERROR)
logger.setConsoleFormat('%M')
logger.setFileFormat('%D [%L] %M')
logger.setConsoleColor(True)


class OpsiConvert():
	def __init__(self, readBackend, writeBackend):
		self.readBackend  = readBackend
		self.writeBackend = writeBackend
		
		self.backendReplicator = BackendReplicator(
			readBackend  = self.readBackend,
			writeBackend = self.writeBackend,
			newServerId  = None,
			cleanupFirst = True)
			
		self.currentProgressSubject = self.backendReplicator.getCurrentProgressSubject()
		self.overallProgressSubject = self.backendReplicator.getOverallProgressSubject()
		
		self.currentProgressSubject.attachObserver(self)
		self.overallProgressSubject.attachObserver(self)
		
		self._message = ''
	
	def ioctl_GWINSZ(self, fd):
		try:
			cr = struct.unpack('hh',fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
		except:
			return None
		return cr
	
	def getTermWidth(self):
		cr = self.ioctl_GWINSZ(0) or self.ioctl_GWINSZ(1) or self.ioctl_GWINSZ(2)
		if not cr:
			try:
				fd = os.open(os.ctermid(), os.O_RDONLY)
				cr = self.ioctl_GWINSZ(fd)
				os.close(fd)
			except:
				try:
					cr = (env['LINES'], env['COLUMNS'])
				except:
					cr = (25, 80)
		
		return int(cr[1])
	
	def _rewrite(self, line = ''):
		width = self.getTermWidth()
		blank = ''
		for i in range(width):
			blank = blank + ' '
		
		if len(line) > width:
			line = line[:width]
		
		sys.stdout.write(blank + '\r' + line + '\r')
		sys.stdout.flush()
	
	def convert(self):
		self.backendReplicator.replicate()
	
	def __del__(self):
		self.currentProgressSubject.detachObserver(self)
		self.overallProgressSubject.detachObserver(self)
	
	def messageChanged(self, subject, message):
		self._message = message
	
	def progressChanged(self, subject, state, percent, timeSpend, timeLeft, speed):
		#time.sleep(0.3)
		#print subject, state, timeLeft
		#sys.stdout.write("%s %0.2f%% ETA: %ds\n" % (subject.getId(), percent, timeLeft))
		self._rewrite(u"%s %0.2f%% ETA: %ds '%s'" % (subject.getTitle(), percent, timeLeft, self._message))
		
	



readBackend  = MySQLBackend(username = 'opsi', password = 'opsi', database='opsi')
writeBackend = File31Backend()

oc = OpsiConvert(readBackend, writeBackend)
oc.convert()

