#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
   = = = = = = = = = = =
   =   opsi-convert    =
   = = = = = = = = = = =
   
   opsi-convert is part of the desktop management solution opsi
   (open pc server integration) http://www.opsi.org
   
   Copyright (C) 2007, 2008 uib GmbH
   
   http://www.uib.de/
   
   All rights reserved.
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License version 2 as
   published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
   
   @copyright:	uib GmbH <info@uib.de>
   @author: Jan Schneider <j.schneider@uib.de>
   @license: GNU General Public License version 2
"""

__version__ = '0.7.1'

import sys, getopt, gettext, re, getpass, socket

# OPSI imports
from OPSI.Logger import *
from OPSI.Util import *
from OPSI.Backend import *
from OPSI.Backend.BackendManager import *

logger = Logger()
logger.setConsoleLevel(LOG_ERROR)
logger.setConsoleFormat('%M')
logger.setFileFormat('%D [%L] %M')
logger.setConsoleColor(True)

# Get locale
try:
	t = gettext.translation('opsi-convert', LOCALE_DIR)
	_ = t.ugettext
except Exception, e:
	logger.warning("Locale not found: %s" % e)
	def _(string):
		"""Dummy method, created and called when no locale is found.
		Uses the fallback language (called C; means english) then."""
		return string


def usage():
	print _("\nUsage: %s [options] <from> <to>") % os.path.basename(sys.argv[0])
	print _("Convert an opsi database into an other.")
	print _("Options:")
	print _("    -h        show this help text")
	print _("    -V        show version information")
	print _("    -v        increase verbosity (can be used multiple times)")
	print _("    -n        do not clean destination database before writing")
	print _("    -s        use destination host as new server")
	print _("    -l <file> log to this file")
	print ""
	print _("<from> and <to> can be:")
	print _("     - the name of a backend (File, File31, LDAP, ...)")
	print _("     - the url of a opsi configuration service")
	print _("       http(s)://<user>@<host>:<port>/rpc")
	print _("     - the path to a backend-manager configuration")
	print ""


def getBackendConfig(backend):
	class Config:
		def __init__(self):
			self.backends = {}
			fqdn = socket.getfqdn()
			if (fqdn.count('.') < 2):
				raise Exception("Failed to get fqdn: %s" % fqdn)
			self.defaultDomain = '.'.join(fqdn.split('.')[1:])
	self = Config()
	confDir = '/etc/opsi/backendManager.d'
	for f in os.listdir(confDir):
		if not f.endswith('.conf'):
			continue
		confFile = os.path.join(confDir, f)
		try:
			execfile(confFile)
		except:
			pass
		for (key, value) in self.backends.items():
			if (key == backend):
				return value.get('config', {})
	return {}
	
def main(argv):
	logLevel = LOG_ERROR
	newServerId = None
	cleanupFirst = True
	
	# Get options
	try:
		(opts, args) = getopt.getopt(argv, "hvVnsl:")
	
	except getopt.GetoptError:
		usage()
		sys.exit(1)
	
	for (opt, arg) in opts:
		if   (opt == "-h"):
			usage()
			return
		elif (opt == "-V"):
			print __version__
			return
		elif (opt == "-v"):
			logLevel += 1
			logger.setConsoleLevel(logLevel)
			logger.setFileLevel(logLevel)
		elif (opt == "-n"):
			cleanupFirst = False
		elif (opt == "-s"):
			newServerId = socket.getfqdn()
		elif (opt == "-l"):
			logger.setLogFile(arg)
			logger.setFileLevel(logLevel)
		
	if (len(args) < 2):
		usage()
		sys.exit(1)
	
	readBackend = args[0]
	writeBackend = args[1]
	
	# Define read/write backend
	read = {
		'username'	: '',
		'password'	: '',
		'address'	: '',
		'backend'	: '',
		'config'	: '' }
	write = {
		'username'	: '',
		'password'	: '',
		'address'	: '',
		'backend'	: '',
		'config'	: '' }
	
	logger.comment( _("Converting from backend '%s' to backend '%s'.") % (readBackend, writeBackend) )
	
	
	# Parse read backend
	match = re.search('^(\w+://)', readBackend)
	if match:
		# Seems to be an URL
		match = re.search('^(\w+://)([^@]+)@([^:]+:\d+/.*)$', readBackend)
		if match:
			read['backend'] = 'JSONRPC'
			read['address'] = match.group(1) + match.group(3)
			read['username'] = match.group(2)
		else:
			raise Exception("Bad source URL '%s'" % readBackend)
	elif os.path.isfile(readBackend):
		# Is a filename
		read['config'] = os.path.abspath(readBackend)
	else:
		# Assuming a backend name
		read['backend'] = readBackend
	
	
	# Parse write backend
	match = re.search('^(\w+://)', writeBackend)
	if match:
		# Seems to be an URL
		match = re.search('^(\w+://)([^@]+)@([^:]+:\d+/.*)$', writeBackend)
		if match:
			write['backend'] = 'JSONRPC'
			write['address'] = match.group(1) + match.group(3)
			write['username'] = match.group(2)
			if newServerId:
				newServerId = match.group(3).split(':')[0]
				if re.search('^[\d\.]+$', newServerId):
					# Is an ip address
					newServerId = socket.getfqdn(newServerId)
					if re.search('^[\d\.]+$', newServerId):
						raise Exception("Cannot resolve '%s'" % newServerId)
		else:
			raise Exception("Bad destination URL '%s'" % writeBackend)
	elif os.path.isfile(writeBackend):
		# Is a filename
		write['config'] = os.path.abspath(writeBackend)
	else:
		# Assuming a backend name
		write['backend'] = writeBackend
	
	
	# Sanity checks
	if read['backend'] and write['backend']:
		if (read['backend'] == write['backend']):
			if (read['backend'] == 'JSONRPC'):
				if (read['address'] == write['address']):
					raise Exception("Source and destination backend are the same.")
			else:
				raise Exception("Source and destination backend are the same.")
	
	elif read['config'] and write['config'] and os.path.samefile(read['config'], write['config']):
		raise Exception("Source and destination backend are the same.")
	
	if newServerId and ( len(newServerId.split('.')) <= 2 ):
		raise Exception("Bad server-id '%s' for new server" % newServerId)
	
	# Creating BackendManager instance for reading
	bmRead = None
	if read['address']:
		logger.comment( _("Connecting to %s") % read['address'] )
		read['password'] = getpass.getpass()
		
	if read['config']:
		bmRead = BackendManager( configFile = read['config'], authRequired = False )
	else:
		exec('from OPSI.Backend.%s import %sBackend' % (read['backend'], read['backend']))
		exec('b = %sBackend(	address 	= "%s", \
					username 	= "%s", \
					password 	= "%s", \
					args 		= %s )' \
			% (	read['backend'],
				read['address'],
				read['username'],
				read['password'],
				getBackendConfig(read['backend']) ) )
		bmRead = BackendManager( read['username'], read['password'], read['address'], backend = b, authRequired = False )
	bmRead.authenticated()
	
	# Creating BackendManager instance for writing
	bmWrite = None
	if write['address']:
		logger.comment( _("Connecting to %s") % write['address'] )
		write['password'] = getpass.getpass()
	
	if write['config']:
		bmWrite = BackendManager( configFile = write['config'], authRequired = False )
	else:
		exec('from OPSI.Backend.%s import %sBackend' % (write['backend'], write['backend']))
		exec('b = %sBackend(	address 	= "%s", \
					username 	= "%s", \
					password 	= "%s", \
					args 		= %s )' \
			% (	write['backend'],
				write['address'],
				write['username'],
				write['password'],
				getBackendConfig(write['backend']) ) )
		bmWrite = BackendManager( write['username'], write['password'], write['address'], backend = b, authRequired = False )
	bmWrite.authenticated()
	
	# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	# =    Starting conversion                                                    =
	# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	class OverallReplicationProgressObserver(ProgressObserver):
		def messageChanged(self, subject, message):
			#print "%s (%d%%)" % (subject.getMessage(), subject.getPercent())
			print message
			pass
			
		def progressChanged(self, subject, state, percent, timeSpend, timeLeft, speed):
			pass
	
	class CurrentReplicationProgressObserver(ProgressObserver):
		def messageChanged(self, subject, message):
			#print "%s (%d%%)" % (subject.getMessage(), subject.getPercent())
			print message
		
		def progressChanged(self, subject, state, percent, timeSpend, timeLeft, speed):
			#print "%s (%d%%)" % (subject.getMessage(), subject.getPercent())
			pass
		
	orpo = OverallReplicationProgressObserver()
	crpo = CurrentReplicationProgressObserver()
	dbr = DataBackendReplicator(bmRead, bmWrite, newServerId = newServerId, cleanupFirst = cleanupFirst)
	dbr.getOverallProgressSubject().attachObserver(orpo)
	dbr.getCurrentProgressSubject().attachObserver(crpo)
	dbr.replicate()
	print ""

if (__name__ == "__main__"):
	
	try:
		main(sys.argv[1:])
		
	except SystemExit:
		pass
		
	except Exception, e:
		logger.setConsoleLevel(LOG_ERROR)
		logger.logException(e)
		print >> sys.stderr, "ERROR:", str(e)
		sys.exit(1)
	
	sys.exit(0)



