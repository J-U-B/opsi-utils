#!/usr/bin/python
# -*- coding: utf-8 -*-
# auto detect encoding => äöü
"""
   ===========================
   =   opsi-policy-result    =
   ===========================
   
   @copyright: Jan Schneider <j.schneider@uib.de>
   @license: GNU GPL, see COPYING for details.
"""

__version__ = '0.1'

import sys, getopt, gettext

# OPSI imports
from OPSI import Tools
from OPSI.Logger import *
from OPSI.Backend.LDAP import Session
from OPSI.Backend.Univention import *

logger = Logger()
logger.setConsoleLevel(LOG_NONE)
logger.setConsoleColor(True)

# Get locale
try:
	t = gettext.translation('opsi-policy-result', LOCALE_DIR)
	_ = t.ugettext
except Exception, e:
	logger.error("Locale not found: %s" % e)
	def _(string):
		"""Dummy method, created and called when no locale is found.
		Uses the fallback language (called C; means english) then."""
		return string


def usage():
	print _("\nUsage: %s [-h -D -w -s] dn") % os.path.basename(sys.argv[0])
	print _("        -h      host")
	print _("        -D      binddn")
	print _("        -w      bindpw")
	print _("        -s      Shell output")
	print ""


def main(argv):
	host = 'localhost'
	binddn = ''
	bindpw = ''
	shellOutput = False
	dn = None
	
	try:
		(opts, args) = getopt.getopt(argv, "h:D:w:sS")
	
	except getopt.GetoptError:
		usage()
		sys.exit(1)
	
	for (opt, arg) in opts:
		if   (opt == "-h"):
			usage()
			return
		elif (opt == "-D"):
			binddn = arg
		elif (opt == "-w"):
			bindpw = arg
		elif (opt == "-s"):
			shellOutput = True
	
	if (len(args) < 1):
		print >> sys.stderr, "No dn given!"
		usage()
		sys.exit(1)
	
	dn = args[0]
	
	ldap = Session(	host	 = host,
			username = binddn, 
			password = bindpw )
	ldap.connect()	
	
	search = PolicySearch(ldap, dn)
	
	result = search.getResult()
	
	keys = result.keys()
	if shellOutput:
		keys.sort()
	
	for key in keys:
		value = result[key]
		if not isinstance(value.get('value'), list):
			value['value'] = [ value['value'] ]
		
		if shellOutput:
			for v in value['value']:
				print >> sys.stdout, "%s=\"%s\"" % (key, v)
		else:
			print >> sys.stdout, ""
			print >> sys.stdout, "Policy: %s" % value.get('policy')
			print >> sys.stdout, "Attribute: %s" % key
			for v in value['value']:
				print >> sys.stdout, "Value: %s" % v
	
	if not shellOutput:
		print >> sys.stdout, ""
	
	ldap.disconnect()
	
if (__name__ == "__main__"):
	
	try:
		main(sys.argv[1:])
		
	except SystemExit:
		pass
		
	except Exception, e:
		logger.setConsoleLevel(LOG_ERROR)
		logger.logException(e)
		print >> sys.stderr, "ERROR:", str(e)
		sys.exit(1)
	
	sys.exit(0)



