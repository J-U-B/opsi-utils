#!/bin/bash 
LC_ALL=C

#MAILTO="root@foo.bar root"
MAILTO=""
SETSTDRECHTE=off
STDMODES=/opt/etc/Standardrechte.conf
export PATH LC_ALL MAILTO
#wenn immer Debug, dann DEBUG="-x" setzen
DEBUG=""

Echo()
{  echo "$*" | tee -a $LOGFILE
}
 
Exit ()
{   if [ $MAILTO ]; then
	mail $MAILTO < $LOGFILE
    fi
    rm $LOGFILE
    exit $*
}

usage()
{  echo "Aufruf: $MYNAME -v     : zeigt Versionsinformationen an."
   echo "        $MYNAME -h     : gibt diese Hilfe aus."
   echo "        $MYNAME Installationsdatei : installiert das in der"
   echo "                        Installationsdatei enthaltene Paket."
   echo "        $MYNAME -d Installationsdatei : schaltet den Debug Modus"
   echo "                        fuer diese Installation ein."

}

MYNAME=`basename $0`
VERSION="$MYNAME Version 1.51 22.8.2001 (c) G.Weick, K.Jahnke"
for i in $* ; do
   case "$i" in -- ) shift ;;
                -h ) usage $0 ; exit ;;
                -v ) echo "$VERSION"; exit ;;
                -d ) DEBUG="-x" ; shift ;;
   esac
done

# Erstelle AWK Variable mit dem "richtigen" awk Programm
if [ -x "`which gawk`" ] ; then AWK=gawk
   else if [ -x "`which nawk`" ] ; then AWK=nawk
      else AWK=awk
   fi
fi
 
# Erstelle CPIO Variable mit dem "richtigen" cpio Programm
if [ -x "`which gnucpio`" ] ; then CPIO=gnucpio
    else CPIO=cpio
fi

 
if [ "$DEBUG" = -x ] ; then
  set -x
fi

if [ -z "$1" ] ; then
   usage $0
   exit 1
fi

if [ ! -f "$1" ] ; then
   echo "Datei $1 nicht gefunden."
   exit 1
fi

case $1 in
   *.cpio.gz) UNCOMPRESS="gzip -dc"
              UNPACK=$CPIO"  -idum"
              PAKETNAME=`basename $1 .cpio.gz`
              ;;
   *.cpio.Z)  UNCOMPRESS="gzip -dc"
              UNPACK=$CPIO" -idum"        
              PAKETNAME=`basename $1 .cpio.Z`
              ;;
   *.cpio)    UNCOMPRESS="cat"
              UNPACK=$CPIO" -idum"        
              PAKETNAME=`basename $1 .cpio`
              ;;
   *.tar.Z)   UNCOMPRESS="uncompress -c"
              UNPACK="tar -xf -"
              PAKETNAME=`basename $1 .tar.Z`
              ;;
   *.taz)     UNCOMPRESS="gzip -dc"
              UNPACK="tar -xf -"
              PAKETNAME=`basename $1 .taz`
              ;;
   *.tgz)     UNCOMPRESS="gzip -dc"
              UNPACK="tar -xf -"
              PAKETNAME=`basename $1 .tgz`
              ;;
   *.tar.gz)  UNCOMPRESS="gzip -dc"
              UNPACK="tar -xf -"
              PAKETNAME=`basename $1 .tar.gz`
              ;;
   *.tar)     UNCOMPRESS="cat"
              UNPACK="tar -xf -"
              PAKETNAME=`basename $1 .tar`
              ;;
   *)         Echo "$1 ist vermutlich kein komprimiertes Archiv"
              Echo "Installation abgebrochen."
              Exit 1
              ;;
esac

INSTFILE=`pwd`/$1
LOGFILE=/tmp/${PAKETNAME}/install.log

if [ ! -d /tmp/${PAKETNAME} ] ; then mkdir /tmp/${PAKETNAME} ; fi
if [ -f $LOGFILE ] ; then rm $LOGFILE ; fi
cd /tmp/${PAKETNAME}
Echo "Entpacke Installationscript ..."
cat $INSTFILE | $UNCOMPRESS | \
  $UNPACK tmp/fileinstall.${PAKETNAME} 2>&1 \
    | tee -a $LOGFILE

# Versuchs noch mal mit ./tmp/fileinstall bei alten Archiven
if [ ! -f ./tmp/fileinstall.${PAKETNAME} ] ; then
cat $INSTFILE | $UNCOMPRESS | \
  $UNPACK ./tmp/fileinstall.${PAKETNAME} 2>&1 \
    | tee -a $LOGFILE
fi

# Installationsskripts gibts echt nicht.
if [ ! -f ./tmp/fileinstall.${PAKETNAME} ] ; then
  Echo "Produktinstallationsscript ./tmp/fileinstall.${PAKETNAME} ist nicht im Archiv"
  Echo "Installation abgebrochen."
  Exit 1
fi

# Entferne Shell aus dem Skripts und setze SHELL2USE Variable
FISHELL=`head -1 tmp/fileinstall.${PAKETNAME} | $AWK '
    /^#! / { print $2 }
    /^#!/ && ! /^#! / { print substr($1,3) }'`
if [ -n "$FISHELL" ] ; then
   BNSHELL=`basename $FISHELL`
   case $BNSHELL in
      sh|ksh|bash) SHELL2USE="`which $BNSHELL`"
            test -n "$SHELL2USE" || SHELL2USE="`which  bash`"
            test -n "$SHELL2USE" || SHELL2USE="`which  ksh`"
            test -n "$SHELL2USE" || SHELL2USE="`which  sh`"
            if test -z "$SHELL2USE" ; then
               Echo "FATALER FEHLER: Keine Shell (sh,ksh,bash) gefunden!"
               Exit 1
            fi
           ;;
      *)  Echo "FATALER FEHLER: $BNSHELL wird von $0 nicht unterstuetzt!"
          Exit 1
          ;;
    esac
    # Loesche Zeile 1 aus dem fileinstall Skript
ed tmp/fileinstall.${PAKETNAME} <<EOFED >/dev/null 2>&1
1d
w
q
EOFED
    if [ $? != 0 ] ; then
       Echo "Konnte fileinstall Skript nicht aendern." 
       Echo "Installation abgebrochen."
       Exit 1
    fi
else
   test -n "$SHELL2USE" || SHELL2USE="`which  bash`"
   test -n "$SHELL2USE" || SHELL2USE="`which  ksh`"
   test -n "$SHELL2USE" || SHELL2USE="`which  sh`"
   if test -z "$SHELL2USE" ; then
      Echo "FATALER FEHLER: Keine Shell (sh,ksh,bash) gefunden!"
      Exit 1
   fi
fi

# Mache Installationsskript ausfuehrbar
chmod +x ./tmp/fileinstall.${PAKETNAME} 2>&1 | tee -a $LOGFILE
if [ "$?" != 0 ] ; then Exit 1 ; fi

# Fuehre Installationsskript aus
$SHELL2USE $DEBUG ./tmp/fileinstall.${PAKETNAME} $INSTFILE 2>&1 \
    | tee -a $LOGFILE

if [ "$SETSTDRECHTE" = on -a  -f "$STDMODES" ] ; then
   # Pruefe erst mal, ob STDMODES nur durch root beschreibbar ist
   OK=yes
   FERTIG=no
   TESTFILE=$STDMODES
   while  [ "$FERTIG" != yes ] ; do
      if [ `ls -ld $TESTFILE | $AWK '{print $3}'` != root ] ; then
         echo "Sicherheitswarnung: $TESTFILE gehoert nicht root."
         OK=no
      fi
      if isable $TESTFILE b w ; then
         echo "Sicherheitswarnung: $TESTFILE Gruppen-/Welt- beschreibbar."
         OK=no
      fi
      if [ $TESTFILE = / ] ; then FERTIG=yes ; fi
      TESTFILE=`dirname $TESTFILE`
   done
      
   if [ $OK != yes ] ; then
      # Sicherheitsloch: STDMODES durch irgendwen beschreibbar
      echo "FATAL: $STDMODES nicht nur durch root beschreibbar."
      echo "       $STDMODES wird daher nach $STDMODES.unsicher umbenannt"
      mv $STDMODES $STDMODES.unsicher
   else
      # Rechte von STDMODES sind ok
      $AWK ' substr($1, 1, 1) != "#"  {
             if (split($0, std, ":") != 4) {
                printf("Ungueltige Zeile in %s\n", stdmodes) > "/dev/stderr";
                printf("   Zeile: %s\n", $0)  > "/dev/stderr" ;
             }
             else system(sprintf("chmod %s %s; chown %s %s; chgrp %s %s",
                         std[2], std[1],  std[3], std[1], std[4], std[1]));
      }' $STDMODES
   fi
fi

Exit 0
