#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
   = = = = = = = = = = = = = = =
   =   opsi-backup             =
   = = = = = = = = = = = = = = =
   
   opsi-backup is part of the desktop management solution opsi
   (open pc server integration) http://www.opsi.org
   
   Copyright (C) 2010 uib GmbH
   
   http://www.uib.de/
   
   All rights reserved.
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License version 2 as
   published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
   
   @copyright:	uib GmbH <info@uib.de>
   @author: Erol Ueluekmen <e.ueluekmen@uib.de>
   @license: GNU General Public License version 2
"""

__version__ = '4.0.0.1'

import sys, os, getopt, gettext, socket

#OPSI imports
from OPSI.Logger import *
from OPSI.Types import *
from OPSI.System import *

# Get logger instance
logger = Logger()

SMB_CONF         = u'/etc/samba/smb.conf'



sysConfig = {}



def getSysConfig():
	global sysConfig
	if sysConfig:
		return sysConfig
	
	sysConfig['distributor'] = u'unknown'
	sysConfig['distribution'] = u'unknown'
	try:
		f = os.popen('lsb_release -i 2>/dev/null')
		sysConfig['distributor'] = f.read().split(':')[1].strip()
		f.close()
		f = os.popen('lsb_release -d 2>/dev/null')
		sysConfig['distribution'] = f.read().split(':')[1].strip()
		f.close()
	except Exception, e:
		logger.warning(u"Failed to get distributor/distribution: %s" % e)
		
	logger.notice(u"Getting current system config")
	try:
		sysConfig['fqdn'] = forceHostId(socket.getfqdn())
	except:
		raise Exception(u"Failed to get fully qualified domain name, got '%s'" % socket.getfqdn())
	
	sysConfig['hostname'] = sysConfig['fqdn'].split(u'.')[0]
	sysConfig['domain'] = u'.'.join(sysConfig['fqdn'].split(u'.')[1:])
	sysConfig['ipAddress'] = socket.gethostbyname(sysConfig['fqdn'])
	if sysConfig['ipAddress'].split(u'.')[0] in ('127', '169'):
		sysConfig['ipAddress'] = None
	sysConfig['hardwareAddress'] = None
	
	for device in getEthernetDevices():
		devconf = getNetworkDeviceConfig(device)
		if devconf['ipAddress'] and devconf['ipAddress'].split(u'.')[0] not in ('127', '169'):
			if not sysConfig['ipAddress']:
				sysConfig['ipAddress'] = devconf['ipAddress']
			if (sysConfig['ipAddress'] == devconf['ipAddress']):
				sysConfig['netmask']         = devconf['netmask']
				sysConfig['hardwareAddress'] = devconf['hardwareAddress']
				break
	
	if not sysConfig['ipAddress']:
		raise Exception(u"Failed to get a valid ip address for fqdn '%s'" % sysConfig['fqdn'])
	
	if not sysConfig.get('netmask'):
		sysConfig['netmask'] = u'255.255.255.0'
	
	sysConfig['broadcast'] = u''
	sysConfig['subnet']    = u''
	for i in range(4):
		if sysConfig['broadcast']: sysConfig['broadcast'] += u'.'
		if sysConfig['subnet']:    sysConfig['subnet']    += u'.'
		sysConfig['subnet']    += u'%d' % ( int(sysConfig['ipAddress'].split(u'.')[i]) & int(sysConfig['netmask'].split(u'.')[i]) )
		sysConfig['broadcast'] += u'%d' % ( int(sysConfig['ipAddress'].split(u'.')[i]) | int(sysConfig['netmask'].split(u'.')[i]) ^ 255 )
	
	sysConfig['winDomain'] = u''
	if os.path.exists(SMB_CONF):
		f = open(SMB_CONF)
		for line in f.readlines():
			match = re.search('^\s*workgroup\s*=\s*(\S+)\s*$', line)
			if match:
				sysConfig['winDomain'] = match.group(1).upper()
				break
		f.close()
	
	logger.notice(u"System information:")
	logger.notice(u"   distributor  : %s" % sysConfig['distributor'])
	logger.notice(u"   distribution : %s" % sysConfig['distribution'])
	logger.notice(u"   ip address   : %s" % sysConfig['ipAddress'])
	logger.notice(u"   netmask      : %s" % sysConfig['netmask'])
	logger.notice(u"   subnet       : %s" % sysConfig['subnet'])
	logger.notice(u"   broadcast    : %s" % sysConfig['broadcast'])
	logger.notice(u"   fqdn         : %s" % sysConfig['fqdn'])
	logger.notice(u"   hostname     : %s" % sysConfig['hostname'])
	logger.notice(u"   domain       : %s" % sysConfig['domain'])
	logger.notice(u"   win domain   : %s" % sysConfig['winDomain'])
	
	return sysConfig
	
def getOpsiConfig():
	pass

def backupOpsiConfigs():
	pass

def backupMySQLBackend():
	pass

def backupLdapBackend():
	pass

def backupFileBackend():
	pass



def usage():
	print u"\nUsage: %s [options]" % os.path.basename(sys.argv[0])
	print u""
	print u"Creates opsi Backup"
	print u""
	print u"Options:"
	print u"  -h, --help            show this help message and exit"
	print u"  -l			log-level 0..9"
	print u""
	print u"   --log-file <path>    path to log file"
	print u"  -V, --version         show program's version info and exit"
	print u"  -t, --targetpath      target path for backup"
	print u"  -f, --full            creates full backup (like -cbdrw)"
	print u"  -c, --configs         creates backup from opsi configfiles"
	print u"  -b, --backends	creates backup from used opsi-backends"
	print u"  -t  --tempdir         temp dir for creating backup files"
	#print u"  -d, --depot-files	creates backup from depot-files /opt/pcbin/install"
	#print u"  -r, --repository	creates backup from repository /var/lib/opsi/repository"
	#print u"  -w, --workbench	creates backup from opsi-workbench /home/opsiproducts"
	print u"  -v          		verbose"
	print u""

def main(argv):
	config = {
		'backupmode': {
			       'full': False,
			    'configs': False,
			   'backends': False,
				}
		'targetpath': u'/var/lib/opsi/backup',
		'logfile'   : u'/var/log/opsi/opsi-backup.log',
		'temdir'    : u'/tmp'
		'sysConfig' : {},
	}
	
	logger.setLogFile(config['logfile'])
	
	try:
		(opts, args) = getopt.getopt(argv, "hvVfcb:t:")
	
	except getopt.GetoptError:
		usage()
		sys.exit(1)
	
	for (opt, arg) in opts:
		if opt in ("-h", "--help"):
			usage()
			return
		elif (opt == "--log-file"):
			logger.setLogFile(arg)
			logger.setFileLevel(LOG_DEBUG)
		elif (opt == "-l"):
			logger.setConsoleLevel(int(arg))
		elif (opt in ("-V", "--version")):
			print __version__
			return
		elif (opt in ('-f','--full')):
			config['backupmode']['full'] = True
		elif (opt in ('-c','--configs')):
			config['backupmode']['configs'] = True
		elif (opt in ('-b','--backends')):
			config['backupmode']['backends'] = True
		#elif (opt in ('-d','--depot-files')):
		#	config['backupmode']['depot-files'] = True
		#elif (opt in ('-r','--repository')):
		#	config['backupmode']['repository'] = True
		#elif (opt in ('-r','--workbench')):
		#	config['backupmode']['workbench'] = True
		elif (opt in ('-t','--targetpath')):
			config['targetpath'] = forceFilename(arg)
		
	config['sysConfig'] = getSysConfig()
	
	from OPSI.Backend.BackendManager import BackendManager
	backend = BackendManager {
		dispatchConfigFile = u'/etc/opsi/backendManager/dispatch.conf',
		backendConfigDir   = u'/etc/opsi/backends',
		exensionConfigDir  = u'/etc/opsi/backendManager/extend.d',
		depotbackend       = False
	}
	
	if config['backupmode']['backends'] or config['backupmode']['full']:
		backends = backend.dispatcher_getBackendNames()
	
	if 'mysql' in backends:
		
	


if (__name__ == "__main__"):
	exception = None
	
	try:
		main(sys.argv[1:])
	
	except SystemExit, e:
		pass
		
	except Exception, e:
		exception = e
	
	if exception:
		logger.setConsoleLevel(LOG_ERROR)
		logger.logException(exception)
		print >> sys.stderr, u"ERROR: %s" % exception
		sys.exit(1)
	
	sys.exit(0)
